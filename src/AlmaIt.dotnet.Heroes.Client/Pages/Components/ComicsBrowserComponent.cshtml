@using System.Diagnostics
@using System.IO
@using Newtonsoft.Json
@using AlmaIt.dotnet.Heroes.Client.ViewModel.Enumeration
@using AlmaIt.dotnet.Heroes.Client.Pages.Components
@using AlmaIt.dotnet.Heroes.Shared.Enumeration
@using AlmaIt.dotnet.Heroes.Shared.Models
@inject HttpClient Http

@if (this.fullComicBooksList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="float-left">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="Filter"><button class="btn btn-sm" onclick="@ApplySearchFilter"><i class="oi oi-magnifying-glass"></i></button></span>
            </div>
            <input type="text" class="form-control" aria-describedby="Filter" placeholder="search" bind="@this.Filter"/>
        </div>
    </div>
    <button type="button" class="btn btn-primary float-right w-25 mb-3" data-toggle="button" aria-pressed="false" autocomplete="off" onclick="@(async () => await ToggleOverride())">
        @this.overrideToggleMessage
    </button>

    <table class="table table-striped table-sm table-hover">
        <thead>
            <th scope="col">Serie Name</th>
            <th scope="col">Title</th>
            <th scope="col">Issue Number</th>
            <th scope="col"></th>
        </thead>
        <tbody>
            @foreach (var comicBook in viewableComicBooks)
            {
                <tr>
                    <td>
                        @if(@comicBook.ComicSerie == null)
                        {
                            <span> - </span>
                        }
                        else
                        {
                            <span>@comicBook.ComicSerie.Name</span>
                        }
                    </td>
                    <td>@comicBook.Title</td>
                    <td>@comicBook.IssueNumber</td>
                    <td>
                        <button class="btn btn-default" onclick="@(() => EditComicBook(comicBook.Id))">Edit</button> |
                        <button class="btn btn-default" onclick="@(async () => await DeleteComicBook(comicBook.Id))">Delete</button>
                    </td>
                </tr>
                @if(this.editionStatus.Key == comicBook.Id && this.editionStatus.Value)
                {
                    <tr>
                        <td colspan="4" class="px-5 py-3">
                            <EditComicComponent EditedComicBook="@comicBook" EditCompleted="@OnEditionCompleted"/>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <ul class="pagination float-left">
        <li class="page-item @(this.currentPage > 1 ? "enabled" : "disabled")">
            <a class="page-link" onclick=@(() => ShowPage(1)) aria-label="Previous" aria-disabled=@(this.currentPage > 1 ? "false" : "true")>
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <li class="page-item @(this.currentPage > 1 ? "enabled" : "disabled")">
            <a class="page-link" onclick=@(() => ShowPage(this.currentPage - 1)) tabindex="-1" aria-disabled=@(this.currentPage > 1 ? " false" : "true")>
                Previous
            </a>
        </li>
        @{
            int i = this.pagerMin;
            while (i <= this.pagerMax)
            {
                var pageButtonNumber = i;
                <li class="page-item @(pageButtonNumber == this.currentPage ? "active" : "")">
                    <a class="page-link" name="page-@pageButtonNumber" onclick=@(() => ShowPage(pageButtonNumber))>
                        @pageButtonNumber
                    </a>
                </li>
                i++;
            }
        }
        <li class="page-item @(this.currentPage < this.totalPages ? "enabled" : "disabled")">
            <a class="page-link" onclick=@(() => ShowPage(this.currentPage + 1)) tabindex="-1" aria-disabled=@(this.currentPage < this.totalPages ? "false" : "true") >
                Next
            </a>
        </li>
        <li class="page-item @(this.currentPage < this.totalPages ? "enabled" : "disabled")">
            <a class="page-link" onclick=@(() => ShowPage(this.totalPages)) aria-label="Next" aria-disabled=@(this.currentPage < this.totalPages ? "false" : "true")>
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
    <span class="float-right btn btn-link disabled">Nb Comics : @this.fullComicBooksList.Count</span>
    <span class="float-right btn btn-link disabled">@this.statistics</span>
}

@functions {
    [Parameter]
    protected ComicsBrowserType browserType { get; set;}
    private List<ComicBook> fullComicBooksList;
    private List<ComicBook> filteredComicBooksList;
    private IEnumerable<ComicBook> viewableComicBooks = new List<ComicBook>();
    private KeyValuePair<int, bool> editionStatus = new KeyValuePair<int, bool>(0, false);
    private bool overrideDiplayAllComics = false;
    private string overrideToggleMessage = "Show all";
    private string Filter = string.Empty;
    private string statistics = string.Empty;
    int PageSize = 10;
    int totalPages = 1;
    int currentPage = 1;
    int pagerSize = 5;
    int pagerMin = 1;
    int pagerMax = 1;

    protected override async Task OnInitAsync()
    {
        Stream response = null;
        if(this.overrideDiplayAllComics)
        {
            response = await Http.GetStreamAsync("api/ComicBook");
        }
        else
        {
            switch (browserType)
            {
                case ComicsBrowserType.All:
                    response = await Http.GetStreamAsync("api/ComicBook");
                    break;
                case ComicsBrowserType.Collection:
                    response = await Http.GetStreamAsync($"api/ComicBook/type/{ComicBookStatus.Collection}");
                    break;
                case ComicsBrowserType.Wishlist:
                    response = await Http.GetStreamAsync($"api/ComicBook/type/{ComicBookStatus.Wishlist}");
                    break;
                default:
                    break;
            }
        }

        try
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            var serializer = new JsonSerializer();
            using (var sr = new StreamReader(response))
            using (var jsonTextReader = new JsonTextReader(sr))
            {
                fullComicBooksList = serializer.Deserialize<List<ComicBook>>(jsonTextReader);
            }

            stopWatch.Stop();
            statistics += $"convert = {stopWatch.ElapsedMilliseconds.ToString()}ms";
        }
        catch (System.Exception ex)
        {
            statistics = ex.ToString();
        }

        // Apply search filter if any
        this.ApplySearchFilter();

        // Get number of pages based on filtered list
        this.totalPages = (int)Math.Ceiling(this.filteredComicBooksList.Count() / (decimal)PageSize);
        this.ShowPage(this.currentPage);
    }

    public async Task ReloadDataList()
    {
        await this.OnInitAsync();
        this.StateHasChanged();
    }

    protected async Task DeleteComicBook(int id)
    {
        var result = await Http.DeleteAsync($"/api/ComicBook/{id}");
        await OnInitAsync();

        this.StateHasChanged();
    }

    protected void EditComicBook(int id)
    {
        this.editionStatus = new KeyValuePair<int, bool>(id, true);

        this.StateHasChanged();
    }

    protected async Task OnCollectionChanged(bool success)
    {
        if(success)
            await this.OnInitAsync();

        this.StateHasChanged();
    }

    protected async Task OnEditionCompleted(bool success)
    {
        if(success)
            await this.OnInitAsync();

        this.editionStatus = new KeyValuePair<int, bool>(0, false);

        this.StateHasChanged();
    }

    protected async Task ToggleOverride()
    {
        this.overrideDiplayAllComics = !this.overrideDiplayAllComics;
        if(this.overrideDiplayAllComics)
            this.overrideToggleMessage = $"Default filter ({this.browserType})";
        else
            this.overrideToggleMessage = "Show all";

        await this.OnInitAsync();
        this.StateHasChanged();
    }

    private void ShowPage(int pageToShow)
    {
        this.viewableComicBooks = this.filteredComicBooksList.Skip((pageToShow - 1) * PageSize).Take(PageSize);
        this.currentPage = pageToShow;

        this.pagerMin = (pageToShow - this.pagerSize) <= 0 ? 1 : (pageToShow - this.pagerSize);
        this.pagerMax = (pageToShow + this.pagerSize) >= this.totalPages ? this.totalPages : (pageToShow + this.pagerSize);

        this.StateHasChanged();
    }

    protected void ApplySearchFilter()
    {
        if(string.IsNullOrEmpty(this.Filter))
            this.filteredComicBooksList = this.fullComicBooksList;
        else
            this.filteredComicBooksList = this.fullComicBooksList.Where(book => book.Title.Contains(this.Filter) || book.ComicSerie.Name.Contains(this.Filter)).ToList();

        this.StateHasChanged();
        this.ShowPage(this.currentPage);
    }
}
